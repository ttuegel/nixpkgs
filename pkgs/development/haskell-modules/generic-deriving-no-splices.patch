diff --git a/src/Generics/Deriving/TH.hs b/src/Generics/Deriving/TH.hs
index 8268257..91b7995 100644
--- a/src/Generics/Deriving/TH.hs
+++ b/src/Generics/Deriving/TH.hs
@@ -14,32 +14,6 @@
 -- This module contains Template Haskell code that can be used to
 -- automatically generate the boilerplate code for the generic deriving
 -- library.
---
--- To use these functions, pass the name of a data type as an argument:
---
--- @
--- &#123;-&#35; LANGUAGE TemplateHaskell &#35;-&#125;
---
--- data Example a = Example Int Char a
--- $('deriveAll0'     ''Example) -- Derives Generic instance
--- $('deriveAll1'     ''Example) -- Derives Generic1 instance
--- $('deriveAll0And1' ''Example) -- Derives Generic and Generic1 instances
--- @
---
--- On GHC 7.4 or later, this code can also be used with data families. To derive
--- for a data family instance, pass the name of one of the instance's constructors:
---
--- @
--- &#123;-&#35; LANGUAGE FlexibleInstances, TemplateHaskell, TypeFamilies &#35;-&#125;
---
--- data family Family a b
--- newtype instance Family Char x = FamilyChar Char
--- data    instance Family Bool x = FamilyTrue | FamilyFalse
---
--- $('deriveAll0' 'FamilyChar) -- instance Generic (Family Char b) where ...
--- $('deriveAll1' 'FamilyTrue) -- instance Generic1 (Family Bool) where ...
--- -- Alternatively, one could type $(deriveAll1 'FamilyFalse)
--- @
 -----------------------------------------------------------------------------
 
 -- Adapted from Generics.Regular.TH
